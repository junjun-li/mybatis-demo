<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        order by goods_id desc
        limit 10
    </select>

    <select id="selectById" resultType="com.imooc.mybatis.entity.Goods"
            parameterType="integer">
        select *
        from t_goods
        where goods_id = #{value}
    </select>

    <select id="selectPriceRange"
            resultType="com.imooc.mybatis.entity.Goods"
            parameterType="java.util.Map">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price, goods_id
        limit 0, #{pageSize}
    </select>

    <!--
        利用LinkedHashMap保存多表关联结果
        MyBatis会将每一条记录包装为LinkedHashMap对象
        key是字段名,value是字段对应的值,字段类型根据表结构进行自动判断
        优点: 易于扩展,易于使用
        缺点: 太过灵活,无法进行编译时检查
    -->
    <select id="selectGoodsLinkedHashMap" resultType="java.util.LinkedHashMap">
        select goods.*, category.category_name
        from t_goods goods,
             t_category category
        where goods.category_id = category.category_id
        limit 0, 5;
    </select>


    <resultMap id="rmGoods" type="com.imooc.mybatis.dto.GoodsDTO">
        <id column="goods_id" property="goods.goodsId" />

        <result column="title" property="goods.title" />
        <result column="current_price" property="goods.currentPrice" />
        <result column="category_id" property="goods.categoryId" />

        <!--column可以重复,因为他们属于两个不一样的对象-->
        <result column="category_id" property="category.categoryId" />
        <result column="category_name" property="category.categoryName" />
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select goods.*, category.*, '1' as test
        from t_goods goods,
             t_category category
        where goods.category_id = category.category_id
        limit 0, 10;
    </select>

    <!--插入操作-->
    <!--
        selectKey和useGeneratedKeys区别
        - selectKey标签需要明确编写获取最新主键的SQL语句
        - useGeneratedKeys属性会自动根据驱动生成对应SQL语句

        应用场景的区别
        - selectKey适用于所有的关系型数据库
        - useGeneratedKeys只支持"自增主键"类型的数据库

        总结
        - selectKey是通用的解决方案,但是需要迁移数据库时增加了成本
        - useGeneratedKeys配置即可通过驱动的不同生成不同的SQL,减少了维护成本,相对简单,但只支持"自增主键"类型的数据库
    -->
    <insert
        id="insert"
        parameterType="com.imooc.mybatis.entity.Goods"
        useGeneratedKeys="true"
        keyProperty="goodsId"
        keyColumn="goods_id"
    >
        insert into t_goods(title, sub_title, original_cost, current_price,
        discount, is_free_delivery, category_id)
        values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice},
        #{discount}, #{isFreeDelivery}, #{categoryId});
        <!--<selectKey resultType="integer" keyProperty="goodsId" order="AFTER">-->
        <!--    select last_insert_id();-->
        <!--</selectKey>-->
    </insert>
</mapper>